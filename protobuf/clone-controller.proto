/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package apphosting;

import "clone.proto";
import "empty-message.proto";

option java_package = "com.google.apphosting.base.protos";
option java_outer_classname = "ModelClonePb";

message DeadlineInfo {
  required string security_ticket = 1;
  // There are two deadlines: soft and hard.
  // Users should have a chance to clean up after the soft deadline,
  // but their code should be forcibly stopped at the hard deadline.
  required bool hard = 2;
}

message PerformanceDataRequest {
  optional java.apphosting.PerformanceData.Type type = 1
      [default = PERIODIC_SAMPLE];
}

service CloneController {
  // Asks the Clone to put itself into the stopped state, by sending
  // itself a SIGSTOP when it is safe to do so. The Clone will be
  // Sandboxed and resume from this point.
  rpc WaitForSandbox(EmptyMessage) returns (EmptyMessage) {}

  // Updates per-app settings for this clone.
  rpc ApplyCloneSettings(java.apphosting.CloneSettings) returns (EmptyMessage) {

  }

  // Notifies the clone that the soft or hard deadline for an active request
  // has expired.
  rpc SendDeadline(DeadlineInfo) returns (EmptyMessage) {}

  // Deprecated.
  rpc GetPerformanceData(PerformanceDataRequest)
      returns (java.apphosting.PerformanceData) {}
}
