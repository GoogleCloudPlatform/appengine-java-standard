/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// LINT: ALLOW_GROUPS
// Copyright 2009 Google Inc. All Rights Reserved.

syntax = "proto2";

package java.apphosting;

import "common.proto";

option cc_enable_arenas = true;
option java_package = "com.google.apphosting.base.protos";
option java_outer_classname = "ClonePb";

// Performance data for a clone. It consists of multiple entries, each tagged
// with the format the data is in.
message PerformanceData {
  enum Type {
    // Unknown sample type.
    UNKNOWN = 0;

    // A sample recorded after the loading request for an app.
    AFTER_LOADING = 1;

    // A sample taken periodically while the app is running.
    PERIODIC_SAMPLE = 2;
  }

  enum Format {
    // A human-readable blob of text.
    HUMAN_READABLE_TEXT = 1;

    // Hotspot hsperfdata. This is a (currently 32KB) data structure whose
    // contents are described in
    // http://cs/depot/depot2/google_vendor_src_branch/openjdk7/trunk/hotspot/src/share/vm/runtime/perfMemory.hpp.
    // Typically Java tools access it via the sun.misc.Perf class.
    JAVA_HOTSPOT_HSPERFDATA = 2;
  }

  message Entry {
    // Identifies the format of the payload.
    optional Format format = 1;
    optional bytes payload = 2;
  }

  repeated Entry entries = 1;
  optional Type type = 2 [default = PERIODIC_SAMPLE];
}

// Deadline settings for an api package.
// Missing values imply that you should use the default.
message ApiPackageDeadlines {
  reserved 4, 5;

  required string api_package = 1;
  optional double default_deadline_s = 2;
  optional double max_deadline_s = 3;
}

// Settings intended for a clone to implement.
//
// Next tag: 21
message CloneSettings {
  // Deprecated fields which should not be re-used.
  reserved 1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19;

  // Max number of outstanding APIHost RPCs allowed on the Stubby channel.
  optional int32 max_outstanding_api_rpcs = 3;

  // API call deadline settings for online requests.
  repeated ApiPackageDeadlines api_call_deadlines = 4;

  // API call deadline settings for offline requests.
  repeated ApiPackageDeadlines offline_api_call_deadlines = 6;

  // ***********************************************************
  // The following fields should not be modified with lifeguard.
  // ***********************************************************

  // Publicly exposed mostly-unique identifier for this clone. See clone.proto
  // for more details on how this works.
  optional bytes clone_key = 14;

  // Settings for starting a clone intended to create a snapshot.
  optional SnapshotSettings snapshot_settings = 20;
}

// Settings for clones to produce sandbox snapshots.
//
// Next tag: 3
message SnapshotSettings {
  // The name of the container to snapshot.
  optional string snapshot_container_name = 1;

  // Uniquely identifies an operation for creating a snapshot.
  optional string op_id = 2;
}

// A runtime-specific memory multiplier.
//
// Next tag: 3
message MemoryMultiplier {
  optional string runtime_id = 1;
  optional float multiplier = 2;
}

// Settings intended for a supervisor to implement.
//
// Next tag: 75
message SupervisorSettings {
  // Deprecated fields which should not be re-used.
  reserved 1, 2, 4, 10, 13, 14, 15, 17, 22, 30, 31, 40, 42, 44, 45, 46, 47;

  // Soft virtual and private memory limits for the Clone process. When either
  // of these limits are exceeded, the Clone process will be killed politely
  // after handling a request.
  optional int32 soft_virtual_memory_limit_mb = 3;
  optional int32 soft_private_memory_limit_mb = 8;

  // Medium private memory limit for the clone process. Whereas the soft limit
  // is enforced at the end of requests, this medium limit will be checked
  // periodically. Clones in excess of this limit will be sent a shutdown
  // request. Applies only to background servers.
  optional int32 medium_private_memory_limit_mb = 35;

  // Hard private memory limit for the clone process. Whereas the soft limit is
  // enforced at the end of requests, this hard limit will be checked
  // periodically. Clones in excess of this limit will be killed immediately.
  optional int32 hard_private_memory_limit_mb = 9;

  // Hard private memory multiplier for the clone process. This is an input to
  // the calculation of the hard memory limit, and it is specified per runtime.
  // The hard private memory multiplier takes precedence over the default
  // per-runtime multiplier.
  repeated MemoryMultiplier hard_private_memory_multiplier = 74;

  // Heap size, for java processes.
  // DEPRECATED in updateable runtimes (go/runtime-updates). Appserver ignores
  // the value set here, but you can customize the value of --max_jvm_heap_size
  // through runtime updates.
  optional int32 java_clone_heap_size_mb = 29;

  // Perm-gen size, for java processes.
  // DEPRECATED in updateable runtimes (go/runtime-updates). Appserver ignores
  // the value set here, but you can customize the value of
  // --max_jvm_perm_gen_size through runtime updates.
  optional int32 java_clone_perm_gen_size_mb = 62;

  // For java processes, this determines which VM is used.  OpenJDK
  // has two VMs: the client VM (lightweight and fast start-up) and
  // the server VM (slower to warm up but better steady-state
  // performance).  The primary difference is the way that hotspot
  // compilation works: the client VM compiles after fewer iterations
  // (1500) but spends less time optimizing the generated machine
  // code, while the server VM observes the code for many more
  // iterations (10000) before compiling and optimizes more
  // aggressively.  If this is unset, the client compiler will be used.
  enum JavaVmType {
    CLIENT = 0;  // java -client
    SERVER = 1;  // java -server
  }
  // DEPRECATED in updateable runtimes (go/runtime-updates). Appserver ignores
  // the value set here, but you can customize the value of --vm_type through
  // runtime updates.
  optional JavaVmType java_vm_type = 34;

  // ShouldWaitForClone will return true if pending time (i.e. the time this
  // request has already sat on the pending queue up until now) is below this
  // threshold.
  //
  // NOTE: Also used by ShouldStartLoadingRequest as a hard floor. If
  // pending time is below this threshold, then it will return false.
  //
  // NOTE: With 1.6.2, it is *only* used by ShouldStartLoadingRequest.
  optional double wait_for_active_clones_min_pending_time_s = 39;
  // ShouldWaitForClone will return false if pending time (i.e. the time this
  // request has already sat on the pending queue up until now) is above this
  // threshold.
  //
  // NOTE: Also used by ShouldStartLoadingRequest as a hard ceiling. If
  // pending time is above this threshold, then it will return true.
  //
  // NOTE: With 1.6.2, it is *only* used by ShouldStartLoadingRequest.
  optional double wait_for_active_clones_max_pending_time_s = 41;

  // Max requests a Clone can serve before it is killed.
  optional int32 max_clone_successful_requests = 5;

  // Max sequential errors a Clone can serve before it is killed.
  optional int32 max_clone_sequential_errors = 6;

  // Maximum number of concurrent outstanding (aka active) requests to allow for
  // this app or version on this appserver.
  optional int32 max_active_requests = 7;

  // Maximum number of active clones to allow for this app or version on this
  // appserver. An active clone is any clone that is currently processing at
  // least one request.
  optional int32 max_active_clones = 27;

  // Determines whether the appserver will throttle loading requests for this
  // app version.  Default: true for non-servers, false for servers.
  optional bool throttle_loading_requests = 26;

  // Maximum number of recently started concurrent loading requests to allow.
  optional int32 max_loading_requests = 19;

  // N.B.(jonmac): For the request deadline parameters below, we will end up
  // using the maximum applicable deadline. For example, if a request is a
  // offline-warming-loading request (yes, this is possible), then the request
  // will be given the deadline which is the max of all deadline options below.
  // If the request is a warm offline request, it would be given a deadline
  // which is the max of request_deadline_s and offline_request_deadline_s.

  // Overrides the time a runtime is given to process a request. Excludes time
  // spent in a pending queue, and only refers to time spent in the runtime.
  optional double request_deadline_s = 11;

  // Same as request_deadline_s, but for offline requests.
  optional double offline_request_deadline_s = 18;

  // Same as request_deadline_s, but for warming requests.
  optional double warming_request_deadline_s = 20;

  // Same as request_deadline_s, but for loading requests.
  optional double loading_request_deadline_s = 32;

  // Same as request_deadline_s, but for shutdown requests.
  optional double shutdown_request_deadline_s = 33;

  // Overrides the time to allow a request to sit in the pending queue.
  optional double max_pending_delay_s = 12;

  // Boost factor for max_pending_delay_s. Don't use if we don't have to
  // b/122049200
  optional double loading_max_pending_delay_boost_factor = 73;

  // Allows the request to sit in a pending queue up to `max pending delay`
  // times max_pending_delay_s_boost_limit_factor if a loading request for
  // this appversion is being executed.  0 effectively disables this
  // functionality for the app.
  optional double max_pending_delay_boost_limit_factor = 70;

  // Maximum number of pending requests for an app version on one
  // appserver. Once this is exceeded we will begin returning PUSH_BACK to new
  // requests to a given app version.
  optional int32 push_back_max_pending_requests = 16;

  // Maximum cpu rate to allow for any clone belonging to this version, enforced
  // by the throttler.
  // TODO(b/125948820) although this field is called a rate, it is treated in
  // the code as a mhz value.
  optional double max_cpu_rate = 21;

  // Padding for maximum cpu rate of this clone. It will be ignored if
  // max_cpu_rate is set. Otherwise, it will be added to the instance class
  // specific mcycle value as defined by --instance_class_cpu_mhz.
  // TODO(b/125948820) although this field is called a rate, it is treated in
  // the code as a mhz value.
  optional double cpu_rate_padding = 71;

  // CPU rate to start any clone belonging to this version, and held until
  // first loading request is finished or a timeout.
  //
  // Note that this value is NOT mcycles. To prevent accidental
  // misconfiguration, this value is sanity-checked in version_settings.cc.
  optional double startup_cpu_rate = 69;

  // Maximum number of concurrent non-background requests one clone process may
  // serve.
  optional int32 max_concurrent_requests = 23;

  // Number of cpu shares for the clone to have.
  optional int32 cpu_shares = 68;

  // Minimum number of concurrent non-background requests one clone process may
  // serve.
  optional int32 min_concurrent_requests = 54;

  // Maximum number of concurrent background requests one clone process may
  // serve.
  optional int32 max_background_requests = 53;

  // Maximum size of all http requests one clone process may serve concurrently.
  // Not enforced strictly. Rather, the clone can accept new requests if under
  // this threshold, but once the clone is over this threshold it cannot accept
  // additional requests.
  optional int64 max_concurrent_requests_total_size = 36;

  // Limit the number of concurrent requests to a clone based on its past CPU
  // usage instead of relying on a static max_concurrent_requests and
  // max_accepting_cpu.
  optional bool use_dynamic_max_concurrent_requests = 55;

  // The maximum fraction of a clone's CPU rate that is in use before the
  // dynamic max concurrent requests is lowered.
  optional double dynamic_max_concurrent_requests_max_cpu_fraction = 56;

  // The minimum fraction of a clone's CPU rate that is in use before the
  // dynamic max concurrent requests is raised.
  optional double dynamic_max_concurrent_requests_min_cpu_fraction = 57;

  // Maximum size of all pending http requests for an app version. Not enforced
  // strictly. Rather, the pending queue can accept new requests if under this
  // threshold, but once the pending queue is over this threshold, additional
  // requests will fail immediately with PENDING_QUEUE_TOO_LARGE.
  optional int64 max_pending_requests_total_size = 37;

  // If pending queue for app version is above this value, then push-back
  // against incoming requests if possible.
  optional int64 push_back_max_pending_requests_total_size = 38;

  // If positive, then if the clone is running at a cpu rate higher than this
  // (over the last second), we will not send it additional requests, even if it
  // has more space for another request per max_concurrent_requests.
  optional double max_accepting_cpu = 25;

  // How to balance requests across clones for this app version on a given
  // appserver.
  // Type: apphosting::CloneBalancingPolicy::Enum. Can't use that directly
  // because of http://wiki/Main/Proto2WithGenproto, the default value, and
  // apphosting/release/BUILD. Boo!
  // Clone-scheduled apps ignore this field, and use LEAST_ACTIVE by default
  // (eaglepush-controlled).
  optional int32 clone_lb_policy = 24 [default = 0];

  // The default profiler settings to use if no per-request header is specified.
  optional ProfilerSettings profiler_settings = 48;

  // Parameters that tune the ShouldStartLoadingRequest algorithm. Only active
  // if use_multi_queue.
  //
  // ShouldStartLoadingRequest will compare (pending-time + predicted-run-time)
  // against (average-warm-latency * 'multi_queue_warm_latency_multiplier'). If
  // the predicted time is less, then it will wait; if greater, it will issue a
  // loading request.
  optional double multi_queue_warm_latency_multiplier = 50;
  // Hard floor for ShouldStartLoadingRequest. If (pending-time +
  // predicted-run-time) is below this threshold, it will return false.
  optional double multi_queue_min_predicted_time_s = 51;
  // Hard ceiling for ShouldStartLoadingRequest. If (pending-time +
  // predicted-run-time) is above this threshold, it will return true.
  optional double multi_queue_max_predicted_time_s = 52;

  // The sliding-scale-routing algorithm settings.
  //
  // This algorithm is part of the PUSH_BACK system. It is designed primarily
  // for apps scheduled onto many appservers.
  //
  // Traditional pfe->appserver routing is RANDOM. A pfe will pick an
  // appserver, and send it an AppHttpRequest. The appserver will then PUSH_BACK
  // if its cpu is too high or any number of other PUSH_BACK conditions are
  // triggered. The pfe would then send the request to another appserver, for up
  // to a total of --max_appserver_retries retries (in prod this is set to 11).
  //
  // The sliding-scale-algorithm leverages this system together with
  // RequestOracle to do more intelligent load balancing.
  //
  // When enabled, the first 'ready_clone_attempts' AppHttpRequests for a single
  // user request will PUSH_BACK if there is no ready clone available for this
  // app version on this appserver. Note that for clone scheduler managed clones
  // the first sliding_scale_ready_non_discretionary_clone_attempts will only
  // look for ready reserved clones. (ie, those requested by clone scheduler).
  // This is in addition to the rest of the PUSH_BACK conditions.
  // After that, the next 'low_predicted_time_attempts'
  // for a single user request will PUSH_BACK if the predicted pending time for
  // the request exceeds a proportional target. An example helps to illustrate.
  //
  // In this example, this app is on more than 11 appservers,
  // --max_appserver_retries=11, ready_clone_attempts=2,
  // low_predicted_time_attempts=5, and sliding_scale_max_predicted_time_s=1000.
  // This results in the following flow:
  //
  //   Attempt Number  |  AppServer will PUSH_BACK if...
  //  ----------------------------------------------------------
  //               0   |  app version has no ready clones
  //               1   |  app version has no ready clones
  //               2   |  predicted pending time is >200ms
  //               3   |  predicted pending time is >400ms
  //               4   |  predicted pending time is >600ms
  //               5   |  predicted pending time is >800ms
  //               6   |  predicted pending time is >1000ms
  //           7..11   |  normal PUSH_BACK logic, nothing extra
  //
  // The goal of this routing logic is to route around hot appservers, find
  // ready clones. A nice property is that in the steady state, no extra work is
  // involved. It's only when there will be pending delays does the pfe perform
  // extra hops for the request, in proportion to the extent of the pending
  // delay.
  optional bool enable_sliding_scale_routing = 58;
  optional int32 sliding_scale_ready_clone_attempts = 59;
  optional int32 sliding_scale_ready_non_discretionary_clone_attempts = 72;
  optional int32 sliding_scale_low_predicted_time_attempts = 60;
  optional double sliding_scale_max_predicted_time_s = 61;
  // If present, only applies during the ready_clone phase. Will trigger
  // sliding-scale PUSH_BACK if the app version is not under this active clone
  // threshold.
  optional int32 sliding_scale_max_active_clones = 63;

  // The clone-reducer algorithm settings.
  //
  // This runs independent of the existing LRU eviction and excess-idle-clone
  // algorithms, and its purpose is to cull unnecessary clones from the cache.
  // Always ignores reserved clones.
  optional bool enable_clone_reducer = 64;
  // Minimum age of clones to consider for culling.
  optional int32 clone_reducer_min_age_s = 65;
  // Minimum desired utilization of clones. This is a ratio threshold, and
  // evaluated against the rate1m of active_time as measured in sec/sec. Clones
  // with utilizations below this will be culled.
  optional double clone_reducer_min_utilization_1m = 66;
  // Do not cull an app version unless it has more non-reserved clones than
  // this.
  optional int32 clone_reducer_min_clones = 67;
}
